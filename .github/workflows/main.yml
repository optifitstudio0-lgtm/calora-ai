name: Build Android APK Natively

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. يسحب الكود
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. يجهز Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # 3. يجهز Java
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4. يثبت المكتبات
      - name: Install dependencies
        run: npm install

      # 5. يضيف إعداد hermesEnabled لملف الإعدادات
      - name: Add hermesEnabled flag to gradle.properties
        run: echo "hermesEnabled=true" >> android/gradle.properties

      # 6. يرجع ملف التوقيع
      - name: Decode Keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > ./android/my-release-key.keystore

      # 7. يعطي صلاحية التنفيذ
      - name: Make gradlew executable
        working-directory: ./android
        run: chmod +x ./gradlew

      # 8. ((((  التشخيص النهائي: تعديل سكربت Node.js مباشرة  ))))
      - name: Build Android Release APK with Force Debug
        working-directory: ./android
        run: |
          # The Gradle hacks failed. We will now directly modify the Node.js script
          # to wrap it in a try-catch block, forcing it to reveal any error.
          echo ">>> Force-debugging the Expo autolinking Node.js script..."
          NODE_SCRIPT_PATH="../node_modules/expo-modules-autolinking/scripts/resolve_modules.js"

          # Check if the script exists before modifying
          if [ -f "$NODE_SCRIPT_PATH" ]; then
            # Prepend a 'try {' to a new temporary script
            echo "try {" > temp_script.js
            # Append the original script content to the temp file
            cat "$NODE_SCRIPT_PATH" >> temp_script.js
            # Append the universal catch block to the temp file
            echo "} catch (error) { console.error('!!!!!! CRITICAL AUTOLINKING ERROR CATCH !!!!!!', error); process.exit(1); }" >> temp_script.js
            
            # Replace the original script with our new wrapped version
            mv temp_script.js "$NODE_SCRIPT_PATH"
            echo ">>> Node.js script has been wrapped successfully."
          else
            echo ">>> Node.js script not found at $NODE_SCRIPT_PATH. Skipping modification."
          fi
          
          echo ">>> Starting the build..."
          ./gradlew assembleRelease --stacktrace
        env:
          MYAPP_UPLOAD_STORE_FILE: my-release-key.keystore
          MYAPP_UPLOAD_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          MYAPP_UPLOAD_STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      # 9. يرفع الـ APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: calora-apk
          path: android/app/build/outputs/apk/release/app-release.apk
